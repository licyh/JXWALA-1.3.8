digraph "DirectedGraph" {
graph [concentrate = true];center=true;fontsize=6;node [ color=blue,shape="box"fontsize=6,fontcolor=black,fontname=Arial];edge [ color=black,fontsize=6,fontcolor=black,fontname=Arial]; 
   "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" [ ]
   "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, hex2bin(C)C > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, packCode([C[C[CII)[C > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, print_nfa()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, <init>(LJLex/SparseBitSet;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, equals(LJLex/SparseBitSet;LJLex/SparseBitSet;)Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa, mimic(LJLex/CNfa;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, reset()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/Main, main([Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, pset(Ljava/util/Vector;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa2Dfa, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa2Dfa, make_dfa(LJLex/CLexGen;LJLex/CSpec;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, leave(Ljava/lang/String;CI)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CSet, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CSet, addncase(C)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, xor(LJLex/SparseBitSet;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, expandEscape()C > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa2Dfa, reset()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, userRules()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, saveStates()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa2Dfa, free_nfa_states()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, isnewline(C)Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, or(LJLex/SparseBitSet;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, hashCode()I > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, emit(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, pgroups()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, rule()LJLex/CNfa; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, emit_construct()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CInput, getLine()Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, getName()[C > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CBunch, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa2Dfa, in_dstates(LJLex/CBunch;)I > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, trunc_col()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, reset()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, charncmp([CI[CII)I > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, getStates()LJLex/SparseBitSet; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, set(LJLex/CSpec;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, first_in_cat(I)Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet$1, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, packAccept()LJLex/CAccept; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, elements()Ljava/util/Enumeration; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfaPair, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, factor(LJLex/CNfaPair;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CAlloc, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, emit_footer()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CAccept, mimic(LJLex/CAccept;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet$2, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, col_copy(II)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, term(LJLex/CNfaPair;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, emit_states()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet$3, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, binop(LJLex/SparseBitSet;LJLex/SparseBitSet;LJLex/SparseBitSet$BinOp;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CInput, <init>(Ljava/io/Reader;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet$2, op(JJ)J > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa2Dfa, free_dfa_states()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CError, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CError, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, emit_driver()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, print_header()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, bytencmp([BI[BII)I > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, toString()Ljava/lang/String; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, oct2bin(C)C > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CSimplifyNfa, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, printccl(LJLex/CSet;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, enter(Ljava/lang/String;CI)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, thompson(LJLex/CLexGen;LJLex/CSpec;LJLex/CInput;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, print_set(Ljava/util/Vector;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, processStates(LJLex/SparseBitSet;LJLex/CNfa;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CSimplifyNfa, simplify(LJLex/CSpec;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, init_groups()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, row_copy(II)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet$4, <init>(LJLex/SparseBitSet;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, set(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, fix_dtrans()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, details()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CDfa, <init>(I)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, emit_table_as_string([[I)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, row_equiv(II)Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, emit_actions(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, userDeclare()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa2Dfa, sortStates(Ljava/util/Vector;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CAlloc, newCNfaPair()LJLex/CNfaPair; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CAccept, <init>(LJLex/CAccept;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, doubleSize([B)[B > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet$3, op(JJ)J > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, minimize()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CDTrans, <init>(ILJLex/CSpec;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, emit_helpers()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, reduce()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, machine()LJLex/CNfa; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, clone()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, generate()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CAcceptAnchor, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa2Dfa, e_closure(LJLex/CBunch;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet$4, advance()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CSet, contains(I)Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, dodash(LJLex/CSet;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CAccept, <init>([CII)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CError, impos(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, isValid()Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CSet, map(LJLex/CSet;[I)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, get(I)Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, and(LJLex/SparseBitSet;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, expandMacro()Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa2Dfa, get_unmarked()LJLex/CDfa; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet$4, hasMoreElements()Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, new_block(I)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, interp_int(I)Ljava/lang/String; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, emit_table()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CSet, complement()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CSet, add(I)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, ishexdigit(C)Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/Main, <init>()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, col_equiv(II)Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, expr(LJLex/CNfaPair;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CAlloc, newNLPair(LJLex/CSpec;)LJLex/CNfaPair; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CAlloc, newCNfa(LJLex/CSpec;)LJLex/CNfa; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, reset()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa2Dfa, set(LJLex/CLexGen;LJLex/CSpec;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CAlloc, newCDfa(LJLex/CSpec;)LJLex/CDfa; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, isspace(C)Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CSet, mimic(LJLex/CSet;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa2Dfa, move(Ljava/util/Vector;LJLex/SparseBitSet;ILJLex/CBunch;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, discardCNfa(LJLex/CNfa;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, size()I > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, new_block(II)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, plab(LJLex/CNfa;)Ljava/lang/String; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, saveMacro()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, doubleSize([C)[C > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CLexGen, userCode()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, clearAll()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, clear(I)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, allocate_BOL_EOF(LJLex/CSpec;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CUtility, isoctdigit(C)Z > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, bsearch(I)I > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CSpec, <init>(LJLex/CLexGen;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, set(LJLex/CLexGen;LJLex/CSpec;LJLex/CInput;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, print_details()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CNfa2Dfa, add_to_dstates(LJLex/CBunch;)I > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet$1, op(JJ)J > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet$4, nextElement()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, insert_block(II)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMakeNfa, cat_expr(LJLex/CNfaPair;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CMinimize, min_dfa(LJLex/CSpec;)V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/CEmit, emit_header()V > Context: Everywhere" [ ]
   "Node: < Application, LJLex/SparseBitSet, <init>(I)V > Context: Everywhere" [ ]
   "Node: synthetic < Primordial, Ljava/lang/System, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Character, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Integer, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/StringBuffer, append(Ljava/lang/Object;)Ljava/lang/StringBuffer; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/FileReader, <init>(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/FileWriter, <init>(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/BufferedWriter, <init>(Ljava/io/Writer;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintWriter, <init>(Ljava/io/Writer;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintWriter, print(I)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintWriter, print(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintWriter, println(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintWriter, println()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Vector, contains(Ljava/lang/Object;)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Throwable, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Random, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Hashtable, containsKey(Ljava/lang/Object;)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: synthetic < Primordial, Ljava/lang/System, initializeSystemClass()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Arrays, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/String, valueOf(Ljava/lang/Object;)Ljava/lang/String; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/FileInputStream, <init>(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/FileOutputStream, <init>(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/BufferedWriter, <init>(Ljava/io/Writer;I)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintWriter, <init>(Ljava/io/Writer;Z)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Hashtable, hash(Ljava/lang/Object;)I > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Hashtable, rehash()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintWriter, write(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintWriter, newLine()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Vector, indexOf(Ljava/lang/Object;I)I > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicLong, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintStream, <init>(Ljava/io/OutputStream;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, getClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/File, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/FileInputStream, <init>(Ljava/io/File;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/FileOutputStream, <init>(Ljava/io/File;Z)V > Context: Everywhere" [ ]
   "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintWriter, write(Ljava/lang/String;II)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Vector, equals(Ljava/lang/Object;)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, checkMemberAccess(ILjava/lang/Class;Z)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, privateGetDeclaredFields(Z)[Ljava/lang/reflect/Field; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, searchFields([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintStream, <init>(Ljava/io/OutputStream;Z)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ClassLoader, checkClassLoaderPermission(Ljava/lang/ClassLoader;Ljava/lang/Class;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/CharacterDataLatin1, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/CharacterData00, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/CharacterData01, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/CharacterData02, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/CharacterData0E, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicInteger, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Hashtable$Holder, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/AbstractList, equals(Ljava/lang/Object;)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, checkPackageAccess(Ljava/lang/ClassLoader;Z)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, checkInitted()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, getReflectionFactory()Lsun/reflect/ReflectionFactory; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintStream, <init>(ZLjava/io/OutputStream;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/SecurityManager, checkPackageAccess(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/security/AccessController, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ref/Reference, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class$Atomic, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread, dumpStack()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ref/Reference$ReferenceHandler, <init>(Ljava/lang/ThreadGroup;Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread, setPriority(I)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread, setDaemon(Z)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class$Atomic, objectFieldOffset([Ljava/lang/reflect/Field;Ljava/lang/String;)J > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Throwable, printStackTrace()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread, <init>(Ljava/lang/ThreadGroup;Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread, checkAccess()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, access$300([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicReference, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Throwable, printStackTrace(Ljava/io/PrintStream;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread, init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/SecurityManager, checkAccess(Ljava/lang/Thread;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Throwable, printStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap$Holder, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread, init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Throwable$WrappedPrintStream, println(Ljava/lang/Object;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/locks/AbstractQueuedSynchronizer, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread, isCCLOverridden(Ljava/lang/Class;)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread, getContextClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/Object;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread, auditSubclass(Ljava/lang/Class;)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintStream, print(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintStream, newLine()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintStream, write(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread, interrupt()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/SecurityManager$1, run()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread$1, run()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap, putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/security/AccessControlContext, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/SecurityManager, checkMemberAccess(Ljava/lang/Class;I)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/SecurityManager, checkWrite(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/SecurityManager, checkRead(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Vector, indexOf(Ljava/lang/Object;)I > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Vector, removeElement(Ljava/lang/Object;)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintStream, print(C)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/PrintStream, println()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Throwable, printEnclosedStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Object, toString()Ljava/lang/String; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/SecurityManager$1, run()Ljava/lang/String; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread$1, run()Ljava/lang/Boolean; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/FilePermission, <init>(Ljava/lang/String;Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/security/Security, getProperty(Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/security/Security, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/FilePermission, init(I)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/security/AccessControlContext$1, run()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/security/Security$1, run()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap$Segment, put(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/security/AccessControlContext$1, run()Ljava/lang/Void; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/security/Security$1, run()Ljava/lang/Void; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap$Segment, scanAndLockForPut(Ljava/lang/Object;ILjava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$HashEntry; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap$HashEntry, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, privateGetDeclaredMethods(Z)[Ljava/lang/reflect/Method; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, searchMethods([Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/security/Security, access$000()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/locks/ReentrantLock, lock()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/security/Security, initialize()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/locks/ReentrantLock$NonfairSync, lock()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class$EnclosingMethodInfo, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/BufferedInputStream, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Properties, load(Ljava/io/InputStream;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Properties, getProperty(Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/io/File, exists()Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/net/URL, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/net/URL, <init>(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/security/Security, initializeStatic()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/locks/AbstractQueuedSynchronizer, acquire(I)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/locks/LockSupport, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater, newUpdater(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Properties, load0(Ljava/util/Properties$LineReader;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/net/URL, <init>(Ljava/net/URL;Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/locks/AbstractQueuedSynchronizer, selfInterrupt()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl, <init>(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/net/URL, <init>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/reflect/Modifier, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/net/URL, checkSpecifyHandler(Ljava/lang/SecurityManager;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/String, toLowerCase()Ljava/lang/String; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/net/URL, getURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Locale, getDefault()Ljava/util/Locale; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Locale, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/String, toLowerCase(Ljava/util/Locale;)Ljava/lang/String; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ClassLoader, getSystemClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Locale, initDefault()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, toLowerCaseEx(Ljava/lang/String;ILjava/util/Locale;)I > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, toLowerCaseCharArray(Ljava/lang/String;ILjava/util/Locale;)[C > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ClassLoader, initSystemClassLoader()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)[C > Context: Everywhere" [ ]
   "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, isConditionMet(Ljava/lang/String;ILjava/util/Locale;I)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/SystemClassLoaderAction, run()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, isFinalCased(Ljava/lang/String;ILjava/util/Locale;)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/SystemClassLoaderAction, run()Ljava/lang/ClassLoader; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/BreakIterator, getWordInstance(Ljava/util/Locale;)Ljava/text/BreakIterator; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, forName(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Thread, setContextClassLoader(Ljava/lang/ClassLoader;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/BreakIterator, getBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;)Ljava/text/BreakIterator; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/BreakIterator, createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;)Ljava/text/BreakIterator; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/BreakIterator$BreakIteratorCache, <init>(Ljava/util/Locale;Ljava/text/BreakIterator;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/BreakIterator$BreakIteratorGetter, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/BreakIterator, getBundle(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, <init>(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/DictionaryBasedBreakIterator, <init>(Ljava/lang/String;Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, readTables(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/BreakDictionary, <init>(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, readFile(Ljava/lang/String;)[B > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/BreakDictionary, readDictionaryFile(Ljava/lang/String;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/BreakIterator$1, run()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/RuleBasedBreakIterator$1, run()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/BreakDictionary$1, run()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, clone()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, isBoundary(I)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/AbstractCollection, toString()Ljava/lang/String; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/AbstractSet, hashCode()I > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle, getBundle(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, following(I)I > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/DictionaryBasedBreakIterator, following(I)I > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle, getBundleImpl(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/DictionaryBasedBreakIterator, handleNext()I > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle, findBundle(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/List;ILjava/util/ResourceBundle$Control;Ljava/util/ResourceBundle;)Ljava/util/ResourceBundle; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle, throwMissingResourceException(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/Throwable;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/DictionaryBasedBreakIterator, divideUpDictionaryRange(II)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle, loadBundle(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/ResourceBundle$Control;Z)Ljava/util/ResourceBundle; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle, putBundleInCache(Ljava/util/ResourceBundle$CacheKey;Ljava/util/ResourceBundle;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader$1, run()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/RuleBasedBreakIterator$SafeCharIterator, clone()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/text/BreakIterator$BreakIteratorCache, createBreakInstance()Ljava/text/BreakIterator; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/Class, getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle$Control, getFallbackLocale(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/Locale; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle$Control, newBundle(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/util/ResourceBundle; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader$1, run()Ljava/util/ResourceBundle$RBClassLoader; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ClassLoader, getSystemResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/PropertyResourceBundle, <init>(Ljava/io/InputStream;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, <init>(Ljava/util/ResourceBundle$1;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ClassLoader, getSystemResource(Ljava/lang/String;)Ljava/net/URL; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/HashMap, <init>(Ljava/util/Map;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, <init>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/HashMap, putAllForCreate(Ljava/util/Map;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ClassLoader, <init>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/HashMap, putForCreate(Ljava/lang/Object;Ljava/lang/Object;)V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/ClassLoader, checkCreateClassLoader()Ljava/lang/Void; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/lang/SecurityManager, checkCreateClassLoader()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/WeakHashMap$Holder, <clinit>()V > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle$Control$1, run()Ljava/lang/Object; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle$Control$1, run()Ljava/io/InputStream; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, getResource(Ljava/lang/String;)Ljava/net/URL; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/AbstractSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/AbstractCollection, containsAll(Ljava/util/Collection;)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/HashSet, contains(Ljava/lang/Object;)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/HashMap, containsKey(Ljava/lang/Object;)Z > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/HashMap, getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry; > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/Vector, hashCode()I > Context: Everywhere" [ ]
   "Node: < Primordial, Ljava/util/AbstractList, hashCode()I > Context: Everywhere" [ ]
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, hex2bin(C)C > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, packCode([C[C[CII)[C > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, print_nfa()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <init>(LJLex/SparseBitSet;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, equals(LJLex/SparseBitSet;LJLex/SparseBitSet;)Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa, mimic(LJLex/CNfa;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, reset()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/Main, main([Ljava/lang/String;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, pset(Ljava/util/Vector;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, make_dfa(LJLex/CLexGen;LJLex/CSpec;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, leave(Ljava/lang/String;CI)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, addncase(C)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, xor(LJLex/SparseBitSet;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, expandEscape()C > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, reset()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, userRules()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, saveStates()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, free_nfa_states()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, isnewline(C)Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, or(LJLex/SparseBitSet;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, hashCode()I > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, pgroups()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, rule()LJLex/CNfa; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_construct()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CInput, getLine()Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, getName()[C > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CBunch, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, in_dstates(LJLex/CBunch;)I > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, trunc_col()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, reset()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, charncmp([CI[CII)I > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, getStates()LJLex/SparseBitSet; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, set(LJLex/CSpec;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, first_in_cat(I)Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$1, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, packAccept()LJLex/CAccept; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, elements()Ljava/util/Enumeration; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfaPair, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, factor(LJLex/CNfaPair;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_footer()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CAccept, mimic(LJLex/CAccept;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$2, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, col_copy(II)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, term(LJLex/CNfaPair;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_states()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$3, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, binop(LJLex/SparseBitSet;LJLex/SparseBitSet;LJLex/SparseBitSet$BinOp;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CInput, <init>(Ljava/io/Reader;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$2, op(JJ)J > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, free_dfa_states()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CError, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CError, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_driver()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, print_header()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, bytencmp([BI[BII)I > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, toString()Ljava/lang/String; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, oct2bin(C)C > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CSimplifyNfa, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, printccl(LJLex/CSet;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, enter(Ljava/lang/String;CI)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, thompson(LJLex/CLexGen;LJLex/CSpec;LJLex/CInput;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, print_set(Ljava/util/Vector;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, processStates(LJLex/SparseBitSet;LJLex/CNfa;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CSimplifyNfa, simplify(LJLex/CSpec;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, init_groups()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, row_copy(II)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$4, <init>(LJLex/SparseBitSet;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, set(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, fix_dtrans()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, details()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CDfa, <init>(I)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_table_as_string([[I)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, row_equiv(II)Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_actions(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, userDeclare()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, sortStates(Ljava/util/Vector;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCNfaPair()LJLex/CNfaPair; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CAccept, <init>(LJLex/CAccept;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, doubleSize([B)[B > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$3, op(JJ)J > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, minimize()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CDTrans, <init>(ILJLex/CSpec;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_helpers()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, reduce()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, machine()LJLex/CNfa; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, clone()Ljava/lang/Object; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, generate()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CAcceptAnchor, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, e_closure(LJLex/CBunch;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$4, advance()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, contains(I)Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, dodash(LJLex/CSet;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CAccept, <init>([CII)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CError, impos(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, isValid()Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, map(LJLex/CSet;[I)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, get(I)Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, and(LJLex/SparseBitSet;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, expandMacro()Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, get_unmarked()LJLex/CDfa; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$4, hasMoreElements()Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, new_block(I)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, interp_int(I)Ljava/lang/String; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_table()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, complement()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, add(I)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ishexdigit(C)Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/Main, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, col_equiv(II)Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, expr(LJLex/CNfaPair;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newNLPair(LJLex/CSpec;)LJLex/CNfaPair; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCNfa(LJLex/CSpec;)LJLex/CNfa; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, reset()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, set(LJLex/CLexGen;LJLex/CSpec;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCDfa(LJLex/CSpec;)LJLex/CDfa; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, isspace(C)Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, mimic(LJLex/CSet;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, move(Ljava/util/Vector;LJLex/SparseBitSet;ILJLex/CBunch;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, discardCNfa(LJLex/CNfa;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, size()I > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, new_block(II)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, plab(LJLex/CNfa;)Ljava/lang/String; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, saveMacro()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, doubleSize([C)[C > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, userCode()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, clearAll()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, clear(I)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, allocate_BOL_EOF(LJLex/CSpec;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, isoctdigit(C)Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, bsearch(I)I > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CSpec, <init>(LJLex/CLexGen;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, set(LJLex/CLexGen;LJLex/CSpec;LJLex/CInput;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, print_details()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, add_to_dstates(LJLex/CBunch;)I > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$1, op(JJ)J > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$4, nextElement()Ljava/lang/Object; > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, insert_block(II)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, cat_expr(LJLex/CNfaPair;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, min_dfa(LJLex/CSpec;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_header()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <init>(I)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/WeakHashMap$Holder, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Application, LJLex/CError, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/lang/System, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Character, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Integer, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Throwable, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Random, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Arrays, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicLong, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/File, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/CharacterDataLatin1, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/CharacterData00, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/CharacterData01, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/CharacterData02, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/CharacterData0E, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicInteger, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable$Holder, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ref/Reference, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class$Atomic, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicReference, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap$Holder, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/locks/AbstractQueuedSynchronizer, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/security/Security, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap$HashEntry, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class$EnclosingMethodInfo, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/BufferedInputStream, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/net/URL, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/locks/LockSupport, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/reflect/Modifier, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Locale, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/text/BreakIterator$BreakIteratorGetter, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle, <clinit>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, <clinit>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CUtility, hex2bin(C)C > Context: Everywhere" -> "Node: < Application, LJLex/CError, impos(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, packCode([C[C[CII)[C > Context: Everywhere" -> "Node: < Application, LJLex/CInput, getLine()Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, packCode([C[C[CII)[C > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, charncmp([CI[CII)I > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, packCode([C[C[CII)[C > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, packCode([C[C[CII)[C > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, packCode([C[C[CII)[C > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, doubleSize([C)[C > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_nfa()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, printccl(LJLex/CSet;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_nfa()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_nfa()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, interp_int(I)Ljava/lang/String; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_nfa()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, plab(LJLex/CNfa;)Ljava/lang/String; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_nfa()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_nfa()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_nfa()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, indexOf(Ljava/lang/Object;)I > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_nfa()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_nfa()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println()V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, <clinit>()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$1, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, <clinit>()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$2, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, <clinit>()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$3, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, expandEscape()C > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" -> "Node: < Application, LJLex/CInput, getLine()Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, expandMacro()Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, isspace(C)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa, mimic(LJLex/CNfa;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa, mimic(LJLex/CNfa;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, mimic(LJLex/CSet;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, <init>()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, reset()V > Context: Everywhere" 
 "Node: < Application, LJLex/Main, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/Main, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, generate()V > Context: Everywhere" 
 "Node: < Application, LJLex/Main, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, <init>()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, reset()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, pset(Ljava/util/Vector;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, <init>()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, reset()V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dfa(LJLex/CLexGen;LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, reset()V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dfa(LJLex/CLexGen;LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, free_nfa_states()V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dfa(LJLex/CLexGen;LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, free_dfa_states()V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dfa(LJLex/CLexGen;LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dfa(LJLex/CLexGen;LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, set(LJLex/CLexGen;LJLex/CSpec;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CUtility, leave(Ljava/lang/String;CI)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CSet, <init>()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CSet, addncase(C)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, add(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, xor(LJLex/SparseBitSet;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, binop(LJLex/SparseBitSet;LJLex/SparseBitSet;LJLex/SparseBitSet$BinOp;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, expandEscape()C > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, hex2bin(C)C > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, expandEscape()C > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, oct2bin(C)C > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, expandEscape()C > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, expandEscape()C > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ishexdigit(C)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, expandEscape()C > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, expandEscape()C > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, isoctdigit(C)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userRules()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, make_dfa(LJLex/CLexGen;LJLex/CSpec;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userRules()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, thompson(LJLex/CLexGen;LJLex/CSpec;LJLex/CInput;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userRules()V > Context: Everywhere" -> "Node: < Application, LJLex/CSimplifyNfa, simplify(LJLex/CSpec;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userRules()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userRules()V > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userRules()V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, allocate_BOL_EOF(LJLex/CSpec;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userRules()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, min_dfa(LJLex/CSpec;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userRules()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, saveStates()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, saveStates()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, isspace(C)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, saveStates()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, or(LJLex/SparseBitSet;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, binop(LJLex/SparseBitSet;LJLex/SparseBitSet;LJLex/SparseBitSet$BinOp;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, <init>()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, reset()V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_construct()V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_footer()V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_driver()V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, set(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_helpers()V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, reset()V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_header()V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, equals(LJLex/SparseBitSet;LJLex/SparseBitSet;)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, pgroups()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, pset(Ljava/util/Vector;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, pgroups()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, pgroups()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, pgroups()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, rule()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, rule()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, packAccept()LJLex/CAccept; > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, rule()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCNfaPair()LJLex/CNfaPair; > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, rule()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, rule()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, expr(LJLex/CNfaPair;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, rule()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newNLPair(LJLex/CSpec;)LJLex/CNfaPair; > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, rule()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCNfa(LJLex/CSpec;)LJLex/CNfa; > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_construct()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_construct()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_construct()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_construct()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println()V > Context: Everywhere" 
 "Node: < Application, LJLex/CInput, getLine()Z > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, isspace(C)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, getName()[C > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, isnewline(C)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, getName()[C > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, getName()[C > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, isspace(C)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, in_dstates(LJLex/CBunch;)I > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, getStates()LJLex/SparseBitSet; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, getStates()LJLex/SparseBitSet; > Context: Everywhere" -> "Node: < Application, LJLex/CInput, getLine()Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, getStates()LJLex/SparseBitSet; > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, getStates()LJLex/SparseBitSet; > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, getStates()LJLex/SparseBitSet; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, getStates()LJLex/SparseBitSet; > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, isspace(C)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, getStates()LJLex/SparseBitSet; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, getStates()LJLex/SparseBitSet; > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, set(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, first_in_cat(I)Z > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, packAccept()LJLex/CAccept; > Context: Everywhere" -> "Node: < Application, LJLex/CInput, getLine()Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, packAccept()LJLex/CAccept; > Context: Everywhere" -> "Node: < Application, LJLex/CAccept, <init>([CII)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, packAccept()LJLex/CAccept; > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, packAccept()LJLex/CAccept; > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, packAccept()LJLex/CAccept; > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, isspace(C)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, packAccept()LJLex/CAccept; > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, doubleSize([C)[C > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, elements()Ljava/util/Enumeration; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$4, <init>(LJLex/SparseBitSet;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, factor(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, factor(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, term(LJLex/CNfaPair;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, factor(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCNfa(LJLex/CSpec;)LJLex/CNfa; > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_footer()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_footer()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, term(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, term(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, term(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, addncase(C)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, term(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, dodash(LJLex/CSet;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, term(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, complement()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, term(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, add(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, term(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, term(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, expr(LJLex/CNfaPair;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, term(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCNfa(LJLex/CSpec;)LJLex/CNfa; > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_states()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_states()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_states()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_states()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println()V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_states()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_states()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Object, toString()Ljava/lang/String; > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_states()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/AbstractCollection, toString()Ljava/lang/String; > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, binop(LJLex/SparseBitSet;LJLex/SparseBitSet;LJLex/SparseBitSet$BinOp;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$2, op(JJ)J > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, binop(LJLex/SparseBitSet;LJLex/SparseBitSet;LJLex/SparseBitSet$BinOp;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$3, op(JJ)J > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, binop(LJLex/SparseBitSet;LJLex/SparseBitSet;LJLex/SparseBitSet$BinOp;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$1, op(JJ)J > Context: Everywhere" 
 "Node: < Application, LJLex/CInput, <init>(Ljava/io/Reader;)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_driver()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_actions(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_driver()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_driver()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_table()V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_driver()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_driver()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_driver()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_header()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_header()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, interp_int(I)Ljava/lang/String; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_header()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_header()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_header()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_header()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println()V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, toString()Ljava/lang/String; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, elements()Ljava/util/Enumeration; > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, toString()Ljava/lang/String; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$4, hasMoreElements()Z > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, toString()Ljava/lang/String; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$4, nextElement()Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, toString()Ljava/lang/String; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/StringBuffer, append(Ljava/lang/Object;)Ljava/lang/StringBuffer; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/CInput, <init>(Ljava/io/Reader;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSimplifyNfa, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSpec, <init>(LJLex/CLexGen;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/FileReader, <init>(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/FileWriter, <init>(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/BufferedWriter, <init>(Ljava/io/Writer;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, <init>(Ljava/io/Writer;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CUtility, oct2bin(C)C > Context: Everywhere" -> "Node: < Application, LJLex/CError, impos(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" -> "Node: < Application, LJLex/CBunch, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, in_dstates(LJLex/CBunch;)I > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, sortStates(Ljava/util/Vector;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" -> "Node: < Application, LJLex/CDTrans, <init>(ILJLex/CSpec;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, e_closure(LJLex/CBunch;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, get_unmarked()LJLex/CDfa; > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, move(Ljava/util/Vector;LJLex/SparseBitSet;ILJLex/CBunch;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, add_to_dstates(LJLex/CBunch;)I > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, make_dtrans()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, printccl(LJLex/CSet;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, contains(I)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, printccl(LJLex/CSet;)V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, interp_int(I)Ljava/lang/String; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, printccl(LJLex/CSet;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, printccl(LJLex/CSet;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, print(C)V > Context: Everywhere" 
 "Node: < Application, LJLex/CUtility, enter(Ljava/lang/String;CI)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, thompson(LJLex/CLexGen;LJLex/CSpec;LJLex/CInput;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, reset()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, thompson(LJLex/CLexGen;LJLex/CSpec;LJLex/CInput;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, machine()LJLex/CNfa; > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, thompson(LJLex/CLexGen;LJLex/CSpec;LJLex/CInput;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, set(LJLex/CLexGen;LJLex/CSpec;LJLex/CInput;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, thompson(LJLex/CLexGen;LJLex/CSpec;LJLex/CInput;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, print_set(Ljava/util/Vector;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, processStates(LJLex/SparseBitSet;LJLex/CNfa;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, get(I)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, simplify(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, simplify(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, map(LJLex/CSet;[I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, simplify(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, init_groups()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet$4, <init>(LJLex/SparseBitSet;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$4, advance()V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, set(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, details()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, details()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, details()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, details()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println()V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_table_as_string([[I)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, print(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_table_as_string([[I)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_table_as_string([[I)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_table_as_string([[I)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_actions(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_actions(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_actions(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_actions(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userDeclare()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, packCode([C[C[CII)[C > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userDeclare()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, saveStates()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userDeclare()V > Context: Everywhere" -> "Node: < Application, LJLex/CInput, getLine()Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userDeclare()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, getName()[C > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userDeclare()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, charncmp([CI[CII)I > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userDeclare()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userDeclare()V > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userDeclare()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, saveMacro()V > Context: Everywhere" 
 "Node: < Application, LJLex/CAlloc, newCNfaPair()LJLex/CNfaPair; > Context: Everywhere" -> "Node: < Application, LJLex/CNfaPair, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, minimize()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, init_groups()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, minimize()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, fix_dtrans()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, minimize()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, minimize()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, contains(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, minimize()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_helpers()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_states()V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_helpers()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_helpers()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_helpers()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_helpers()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, reduce()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, reduce()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, trunc_col()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, reduce()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, col_copy(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, reduce()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, row_copy(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, reduce()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, row_equiv(II)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, reduce()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, get(I)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, reduce()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, reduce()V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, col_equiv(II)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, reduce()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, reduce()V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, clear(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, machine()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, machine()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, machine()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CSet, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, machine()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, rule()LJLex/CNfa; > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, machine()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, getStates()LJLex/SparseBitSet; > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, machine()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, processStates(LJLex/SparseBitSet;LJLex/CNfa;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, machine()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CAccept, <init>([CII)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, machine()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CSet, add(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, machine()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, machine()LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCNfa(LJLex/CSpec;)LJLex/CNfa; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, generate()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, userRules()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, generate()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit(LJLex/CSpec;Ljava/io/PrintWriter;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, generate()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, userDeclare()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, generate()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, generate()V > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, generate()V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, userCode()V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, generate()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, e_closure(LJLex/CBunch;)V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, sortStates(Ljava/util/Vector;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, e_closure(LJLex/CBunch;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, get(I)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, e_closure(LJLex/CBunch;)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, e_closure(LJLex/CBunch;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, e_closure(LJLex/CBunch;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, contains(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, xor(LJLex/SparseBitSet;)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, or(LJLex/SparseBitSet;)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, clone()Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, get(I)Z > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, and(LJLex/SparseBitSet;)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, size()I > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, clearAll()V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, clear(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, main([Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CSet, contains(I)Z > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, get(I)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, dodash(LJLex/CSet;)V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, dodash(LJLex/CSet;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, addncase(C)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, dodash(LJLex/CSet;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, add(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CError, impos(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CSet, map(LJLex/CSet;[I)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, elements()Ljava/util/Enumeration; > Context: Everywhere" 
 "Node: < Application, LJLex/CSet, map(LJLex/CSet;[I)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$4, hasMoreElements()Z > Context: Everywhere" 
 "Node: < Application, LJLex/CSet, map(LJLex/CSet;[I)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CSet, map(LJLex/CSet;[I)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, clearAll()V > Context: Everywhere" 
 "Node: < Application, LJLex/CSet, map(LJLex/CSet;[I)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$4, nextElement()Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, get(I)Z > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, bsearch(I)I > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, and(LJLex/SparseBitSet;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, binop(LJLex/SparseBitSet;LJLex/SparseBitSet;LJLex/SparseBitSet$BinOp;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, expandMacro()Z > Context: Everywhere" -> "Node: < Application, LJLex/CError, impos(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, expandMacro()Z > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, expandMacro()Z > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, expandMacro()Z > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, doubleSize([C)[C > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, expandMacro()Z > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, expandMacro()Z > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, contains(I)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, get(I)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, and(LJLex/SparseBitSet;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, size()I > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, clearAll()V > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, containsKey(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CSimplifyNfa, computeClasses(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println()V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, new_block(I)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, new_block(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, new_block(I)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, bsearch(I)I > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_table()V > Context: Everywhere" -> "Node: < Application, LJLex/CEmit, emit_table_as_string([[I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_table()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_table()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_table()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_table()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println()V > Context: Everywhere" 
 "Node: < Application, LJLex/CSet, add(I)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, expr(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CLexGen, advance()I > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, expr(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCNfaPair()LJLex/CNfaPair; > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, expr(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, expr(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCNfa(LJLex/CSpec;)LJLex/CNfa; > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, expr(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, cat_expr(LJLex/CNfaPair;)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, new_block(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, bsearch(I)I > Context: Everywhere" 
 "Node: < Application, LJLex/CAlloc, newNLPair(LJLex/CSpec;)LJLex/CNfaPair; > Context: Everywhere" -> "Node: < Application, LJLex/CSet, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CAlloc, newNLPair(LJLex/CSpec;)LJLex/CNfaPair; > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCNfaPair()LJLex/CNfaPair; > Context: Everywhere" 
 "Node: < Application, LJLex/CAlloc, newNLPair(LJLex/CSpec;)LJLex/CNfaPair; > Context: Everywhere" -> "Node: < Application, LJLex/CSet, add(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CAlloc, newNLPair(LJLex/CSpec;)LJLex/CNfaPair; > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCNfa(LJLex/CSpec;)LJLex/CNfa; > Context: Everywhere" 
 "Node: < Application, LJLex/CAlloc, newCNfa(LJLex/CSpec;)LJLex/CNfa; > Context: Everywhere" -> "Node: < Application, LJLex/CNfa, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CAlloc, newCDfa(LJLex/CSpec;)LJLex/CDfa; > Context: Everywhere" -> "Node: < Application, LJLex/CDfa, <init>(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CSet, mimic(LJLex/CSet;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, clone()Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, move(Ljava/util/Vector;LJLex/SparseBitSet;ILJLex/CBunch;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <init>()V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, move(Ljava/util/Vector;LJLex/SparseBitSet;ILJLex/CBunch;)V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa2Dfa, sortStates(Ljava/util/Vector;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, move(Ljava/util/Vector;LJLex/SparseBitSet;ILJLex/CBunch;)V > Context: Everywhere" -> "Node: < Application, LJLex/CSet, contains(I)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, move(Ljava/util/Vector;LJLex/SparseBitSet;ILJLex/CBunch;)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, move(Ljava/util/Vector;LJLex/SparseBitSet;ILJLex/CBunch;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, set(I)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, discardCNfa(LJLex/CNfa;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, removeElement(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, new_block(II)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, new_block(II)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, insert_block(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, plab(LJLex/CNfa;)Ljava/lang/String; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, indexOf(Ljava/lang/Object;)I > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, saveMacro()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, saveMacro()V > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, saveMacro()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, isspace(C)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, saveMacro()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userCode()V > Context: Everywhere" -> "Node: < Application, LJLex/CInput, getLine()Z > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userCode()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userCode()V > Context: Everywhere" -> "Node: < Application, LJLex/CError, parse_error(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/CLexGen, userCode()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, clear(I)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, new_block(II)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, clear(I)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, bsearch(I)I > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, allocate_BOL_EOF(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, bsearch(I)I > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CSpec, <init>(LJLex/CLexGen;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, set(LJLex/CLexGen;LJLex/CSpec;LJLex/CInput;)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, print_details()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, print_details()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, print_details()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, print(C)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, add_to_dstates(LJLex/CBunch;)I > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, clone()Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, add_to_dstates(LJLex/CBunch;)I > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, add_to_dstates(LJLex/CBunch;)I > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCDfa(LJLex/CSpec;)LJLex/CDfa; > Context: Everywhere" 
 "Node: < Application, LJLex/CNfa2Dfa, add_to_dstates(LJLex/CBunch;)I > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet$4, nextElement()Ljava/lang/Object; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet$4, advance()V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, insert_block(II)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, cat_expr(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CNfa, mimic(LJLex/CNfa;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, cat_expr(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, first_in_cat(I)Z > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, cat_expr(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, factor(LJLex/CNfaPair;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, cat_expr(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CAlloc, newCNfaPair()LJLex/CNfaPair; > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, cat_expr(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMakeNfa, cat_expr(LJLex/CNfaPair;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMakeNfa, discardCNfa(LJLex/CNfa;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, min_dfa(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, reset()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, min_dfa(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, set(LJLex/CSpec;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, min_dfa(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, minimize()V > Context: Everywhere" 
 "Node: < Application, LJLex/CMinimize, min_dfa(LJLex/CSpec;)V > Context: Everywhere" -> "Node: < Application, LJLex/CMinimize, reduce()V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_header()V > Context: Everywhere" -> "Node: < Application, LJLex/CUtility, ASSERT(Z)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_header()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_header()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Application, LJLex/CEmit, emit_header()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println()V > Context: Everywhere" 
 "Node: < Application, LJLex/SparseBitSet, <init>(I)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, <init>()V > Context: Everywhere" 
 "Node: synthetic < Primordial, Ljava/lang/System, <clinit>()V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/lang/System, initializeSystemClass()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Character, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Integer, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/StringBuffer, append(Ljava/lang/Object;)Ljava/lang/StringBuffer; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/String, valueOf(Ljava/lang/Object;)Ljava/lang/String; > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/FileReader, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/FileInputStream, <init>(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/FileWriter, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/FileOutputStream, <init>(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/BufferedWriter, <init>(Ljava/io/Writer;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/BufferedWriter, <init>(Ljava/io/Writer;I)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintWriter, <init>(Ljava/io/Writer;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, <init>(Ljava/io/Writer;Z)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, hash(Ljava/lang/Object;)I > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, rehash()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintWriter, print(I)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, write(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintWriter, print(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, write(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintWriter, println(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintWriter, println(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, println()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintWriter, println()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, newLine()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Vector, contains(Ljava/lang/Object;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, indexOf(Ljava/lang/Object;I)I > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Throwable, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Random, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Hashtable, containsKey(Ljava/lang/Object;)Z > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Hashtable, containsKey(Ljava/lang/Object;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, hash(Ljava/lang/Object;)I > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, hash(Ljava/lang/Object;)I > Context: Everywhere" 
 "Node: synthetic < Primordial, Ljava/lang/System, initializeSystemClass()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: synthetic < Primordial, Ljava/lang/System, initializeSystemClass()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, <init>(Ljava/io/OutputStream;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Arrays, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/String, valueOf(Ljava/lang/Object;)Ljava/lang/String; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, toString()Ljava/lang/String; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/String, valueOf(Ljava/lang/Object;)Ljava/lang/String; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Object, toString()Ljava/lang/String; > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/FileInputStream, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/FileInputStream, <init>(Ljava/io/File;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/FileOutputStream, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/FileOutputStream, <init>(Ljava/io/File;Z)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/BufferedWriter, <init>(Ljava/io/Writer;I)V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintWriter, <init>(Ljava/io/Writer;Z)V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Hashtable, hash(Ljava/lang/Object;)I > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, hashCode()I > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Hashtable, rehash()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, hash(Ljava/lang/Object;)I > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintWriter, write(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintWriter, write(Ljava/lang/String;II)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintWriter, newLine()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, interrupt()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Vector, indexOf(Ljava/lang/Object;I)I > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Vector, indexOf(Ljava/lang/Object;I)I > Context: Everywhere" -> "Node: < Primordial, Ljava/util/AbstractSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicLong, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, checkMemberAccess(ILjava/lang/Class;Z)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, privateGetDeclaredFields(Z)[Ljava/lang/reflect/Field; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, searchFields([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintStream, <init>(Ljava/io/OutputStream;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, <init>(Ljava/io/OutputStream;Z)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, getClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, checkClassLoaderPermission(Ljava/lang/ClassLoader;Ljava/lang/Class;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/File, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/FileInputStream, <init>(Ljava/io/File;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkRead(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/FileOutputStream, <init>(Ljava/io/File;Z)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkWrite(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager$1, run()Ljava/lang/Object; > Context: Everywhere" 
 "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread$1, run()Ljava/lang/Object; > Context: Everywhere" 
 "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/security/AccessControlContext$1, run()Ljava/lang/Object; > Context: Everywhere" 
 "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/security/Security$1, run()Ljava/lang/Object; > Context: Everywhere" 
 "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/text/BreakIterator$1, run()Ljava/lang/Object; > Context: Everywhere" 
 "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader$1, run()Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintWriter, write(Ljava/lang/String;II)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, interrupt()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Vector, equals(Ljava/lang/Object;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/util/AbstractList, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, checkMemberAccess(ILjava/lang/Class;Z)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, checkPackageAccess(Ljava/lang/ClassLoader;Z)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, checkMemberAccess(ILjava/lang/Class;Z)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, checkMemberAccess(ILjava/lang/Class;Z)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkMemberAccess(Ljava/lang/Class;I)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, privateGetDeclaredFields(Z)[Ljava/lang/reflect/Field; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, checkInitted()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, searchFields([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getReflectionFactory()Lsun/reflect/ReflectionFactory; > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintStream, <init>(Ljava/io/OutputStream;Z)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, <init>(ZLjava/io/OutputStream;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ClassLoader, checkClassLoaderPermission(Ljava/lang/ClassLoader;Ljava/lang/Class;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/CharacterDataLatin1, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/CharacterData00, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/CharacterData01, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/CharacterData02, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/CharacterData0E, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicInteger, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Hashtable$Holder, <clinit>()V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/AbstractList, equals(Ljava/lang/Object;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/AbstractList, equals(Ljava/lang/Object;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/util/AbstractSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, checkPackageAccess(Ljava/lang/ClassLoader;Z)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPackageAccess(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, checkInitted()V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, getReflectionFactory()Lsun/reflect/ReflectionFactory; > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintStream, <init>(ZLjava/io/OutputStream;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/BufferedWriter, <init>(Ljava/io/Writer;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/security/AccessController, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SecurityManager, checkPackageAccess(Ljava/lang/String;)V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SecurityManager, checkPackageAccess(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/AccessController, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, dumpStack()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/AccessController, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/AccessController, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/security/AccessControlContext, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ref/Reference, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ref/Reference$ReferenceHandler, <init>(Ljava/lang/ThreadGroup;Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ref/Reference, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, setPriority(I)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ref/Reference, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, setDaemon(Z)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class$Atomic, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class$Atomic, objectFieldOffset([Ljava/lang/reflect/Field;Ljava/lang/String;)J > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, dumpStack()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Throwable, printStackTrace()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/String, valueOf(Ljava/lang/Object;)Ljava/lang/String; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ref/Reference$ReferenceHandler, <init>(Ljava/lang/ThreadGroup;Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, <init>(Ljava/lang/ThreadGroup;Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, setPriority(I)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, checkAccess()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, setDaemon(Z)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, checkAccess()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class$Atomic, objectFieldOffset([Ljava/lang/reflect/Field;Ljava/lang/String;)J > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, access$300([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Throwable, printStackTrace()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Throwable, printStackTrace(Ljava/io/PrintStream;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, <init>(Ljava/lang/ThreadGroup;Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, checkAccess()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkAccess(Ljava/lang/Thread;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, access$300([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, searchFields([Ljava/lang/reflect/Field;Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicReference, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Throwable, printStackTrace(Ljava/io/PrintStream;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Throwable, printStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SecurityManager, checkAccess(Ljava/lang/Thread;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Throwable, printStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Throwable, printStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Throwable$WrappedPrintStream, println(Ljava/lang/Object;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Throwable, printStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Throwable, printEnclosedStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap$Holder, <clinit>()V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, setPriority(I)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, isCCLOverridden(Ljava/lang/Class;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;JLjava/security/AccessControlContext;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, getContextClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Throwable$WrappedPrintStream, println(Ljava/lang/Object;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/Object;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/locks/AbstractQueuedSynchronizer, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, isCCLOverridden(Ljava/lang/Class;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, auditSubclass(Ljava/lang/Class;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, isCCLOverridden(Ljava/lang/Class;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap, putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, getContextClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, checkClassLoaderPermission(Ljava/lang/ClassLoader;Ljava/lang/Class;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/Object;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/String, valueOf(Ljava/lang/Object;)Ljava/lang/String; > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/Object;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/Object;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, newLine()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, auditSubclass(Ljava/lang/Class;)Z > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintStream, print(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, write(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintStream, newLine()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, interrupt()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintStream, write(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, interrupt()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, interrupt()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, checkAccess()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SecurityManager$1, run()Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager$1, run()Ljava/lang/String; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread$1, run()Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread$1, run()Ljava/lang/Boolean; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap, putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap$Segment, put(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/AccessControlContext, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/AccessControlContext, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, dumpStack()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/AccessControlContext, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SecurityManager, checkMemberAccess(Ljava/lang/Class;I)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SecurityManager, checkMemberAccess(Ljava/lang/Class;I)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SecurityManager, checkWrite(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SecurityManager, checkWrite(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/FilePermission, <init>(Ljava/lang/String;Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SecurityManager, checkRead(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SecurityManager, checkRead(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/FilePermission, <init>(Ljava/lang/String;Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Vector, indexOf(Ljava/lang/Object;)I > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, indexOf(Ljava/lang/Object;I)I > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Vector, removeElement(Ljava/lang/Object;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, indexOf(Ljava/lang/Object;)I > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, print(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintStream, println(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, newLine()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintStream, print(C)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, write(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/PrintStream, println()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/PrintStream, newLine()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Throwable, printEnclosedStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Throwable, printEnclosedStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Throwable$WrappedPrintStream, println(Ljava/lang/Object;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Throwable, printEnclosedStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Throwable, printEnclosedStackTrace(Ljava/lang/Throwable$PrintStreamOrWriter;[Ljava/lang/StackTraceElement;Ljava/lang/String;Ljava/lang/String;Ljava/util/Set;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Object, toString()Ljava/lang/String; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, hashCode()I > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Object, toString()Ljava/lang/String; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/AbstractSet, hashCode()I > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SecurityManager$1, run()Ljava/lang/String; > Context: Everywhere" -> "Node: < Primordial, Ljava/security/Security, getProperty(Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread$1, run()Ljava/lang/Boolean; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/FilePermission, <init>(Ljava/lang/String;Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/FilePermission, init(I)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security, getProperty(Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security, getProperty(Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Properties, getProperty(Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security, <clinit>()V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/FilePermission, init(I)V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/AccessControlContext$1, run()Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/security/AccessControlContext$1, run()Ljava/lang/Void; > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security$1, run()Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/security/Security$1, run()Ljava/lang/Void; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap$Segment, put(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap$Segment, scanAndLockForPut(Ljava/lang/Object;ILjava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$HashEntry; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, checkMemberAccess(ILjava/lang/Class;Z)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, privateGetDeclaredMethods(Z)[Ljava/lang/reflect/Method; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, searchMethods([Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/AccessControlContext$1, run()Ljava/lang/Void; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security$1, run()Ljava/lang/Void; > Context: Everywhere" -> "Node: < Primordial, Ljava/security/Security, access$000()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap$Segment, scanAndLockForPut(Ljava/lang/Object;ILjava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$HashEntry; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/locks/ReentrantLock, lock()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap$HashEntry, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, privateGetDeclaredMethods(Z)[Ljava/lang/reflect/Method; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, checkInitted()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, searchMethods([Ljava/lang/reflect/Method;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getReflectionFactory()Lsun/reflect/ReflectionFactory; > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security, access$000()V > Context: Everywhere" -> "Node: < Primordial, Ljava/security/Security, initialize()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/locks/ReentrantLock, lock()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/locks/ReentrantLock$NonfairSync, lock()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security, initialize()V > Context: Everywhere" -> "Node: < Primordial, Ljava/security/Security, initializeStatic()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security, initialize()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/FileInputStream, <init>(Ljava/io/File;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security, initialize()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security, initialize()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Throwable, printStackTrace()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security, initialize()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Properties, load(Ljava/io/InputStream;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security, initialize()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Properties, getProperty(Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security, initialize()V > Context: Everywhere" -> "Node: < Primordial, Ljava/io/File, exists()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security, initialize()V > Context: Everywhere" -> "Node: < Primordial, Ljava/net/URL, <init>(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/locks/ReentrantLock$NonfairSync, lock()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/locks/AbstractQueuedSynchronizer, acquire(I)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class$EnclosingMethodInfo, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/BufferedInputStream, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater, newUpdater(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Properties, load(Ljava/io/InputStream;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Properties, load0(Ljava/util/Properties$LineReader;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Properties, getProperty(Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/io/File, exists()Z > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkRead(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/net/URL, <clinit>()V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/net/URL, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/net/URL, <init>(Ljava/net/URL;Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/security/Security, initializeStatic()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/locks/AbstractQueuedSynchronizer, acquire(I)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/locks/AbstractQueuedSynchronizer, selfInterrupt()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/locks/LockSupport, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater, newUpdater(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl, <init>(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Properties, load0(Ljava/util/Properties$LineReader;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/net/URL, <init>(Ljava/net/URL;Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/net/URL, <init>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/locks/AbstractQueuedSynchronizer, selfInterrupt()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, interrupt()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl, <init>(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Class;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; > Context: Everywhere" 
 "Node: < Primordial, Ljava/net/URL, <init>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/net/URL, checkSpecifyHandler(Ljava/lang/SecurityManager;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/net/URL, <init>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/String, toLowerCase()Ljava/lang/String; > Context: Everywhere" 
 "Node: < Primordial, Ljava/net/URL, <init>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/net/URL, getURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/reflect/Modifier, <clinit>()V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/net/URL, checkSpecifyHandler(Ljava/lang/SecurityManager;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/String, toLowerCase()Ljava/lang/String; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Locale, getDefault()Ljava/util/Locale; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/String, toLowerCase()Ljava/lang/String; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/String, toLowerCase(Ljava/util/Locale;)Ljava/lang/String; > Context: Everywhere" 
 "Node: < Primordial, Ljava/net/URL, getURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/net/URL, getURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/net/URL, getURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler; > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/net/URL, getURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, getSystemClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Locale, getDefault()Ljava/util/Locale; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Locale, initDefault()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Locale, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/String, toLowerCase(Ljava/util/Locale;)Ljava/lang/String; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, toLowerCaseEx(Ljava/lang/String;ILjava/util/Locale;)I > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/String, toLowerCase(Ljava/util/Locale;)Ljava/lang/String; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, toLowerCaseCharArray(Ljava/lang/String;ILjava/util/Locale;)[C > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ClassLoader, getSystemClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, checkClassLoaderPermission(Ljava/lang/ClassLoader;Ljava/lang/Class;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ClassLoader, getSystemClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, initSystemClassLoader()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Locale, initDefault()V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, toLowerCaseEx(Ljava/lang/String;ILjava/util/Locale;)I > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)[C > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, toLowerCaseCharArray(Ljava/lang/String;ILjava/util/Locale;)[C > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)[C > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ClassLoader, initSystemClassLoader()V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)[C > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Hashtable, get(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)[C > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, isConditionMet(Ljava/lang/String;ILjava/util/Locale;I)Z > Context: Everywhere" 
 "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SystemClassLoaderAction, run()Ljava/lang/Object; > Context: Everywhere" 
 "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/text/RuleBasedBreakIterator$1, run()Ljava/lang/Object; > Context: Everywhere" 
 "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/text/BreakDictionary$1, run()Ljava/lang/Object; > Context: Everywhere" 
 "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle$Control$1, run()Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, isConditionMet(Ljava/lang/String;ILjava/util/Locale;I)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, isFinalCased(Ljava/lang/String;ILjava/util/Locale;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SystemClassLoaderAction, run()Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SystemClassLoaderAction, run()Ljava/lang/ClassLoader; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, isFinalCased(Ljava/lang/String;ILjava/util/Locale;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/text/BreakIterator, getWordInstance(Ljava/util/Locale;)Ljava/text/BreakIterator; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ConditionalSpecialCasing, isFinalCased(Ljava/lang/String;ILjava/util/Locale;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, isBoundary(I)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SystemClassLoaderAction, run()Ljava/lang/ClassLoader; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, forName(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SystemClassLoaderAction, run()Ljava/lang/ClassLoader; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, setContextClassLoader(Ljava/lang/ClassLoader;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakIterator, getWordInstance(Ljava/util/Locale;)Ljava/text/BreakIterator; > Context: Everywhere" -> "Node: < Primordial, Ljava/text/BreakIterator, getBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;)Ljava/text/BreakIterator; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, forName(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Thread, setContextClassLoader(Ljava/lang/ClassLoader;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakIterator, getBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;)Ljava/text/BreakIterator; > Context: Everywhere" -> "Node: < Primordial, Ljava/text/BreakIterator, createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;)Ljava/text/BreakIterator; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakIterator, getBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;)Ljava/text/BreakIterator; > Context: Everywhere" -> "Node: < Primordial, Ljava/text/BreakIterator$BreakIteratorCache, <init>(Ljava/util/Locale;Ljava/text/BreakIterator;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakIterator, getBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;)Ljava/text/BreakIterator; > Context: Everywhere" -> "Node: < Primordial, Ljava/text/BreakIterator$BreakIteratorCache, createBreakInstance()Ljava/text/BreakIterator; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakIterator, createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;)Ljava/text/BreakIterator; > Context: Everywhere" -> "Node: < Primordial, Ljava/text/BreakIterator, getBundle(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakIterator, createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;)Ljava/text/BreakIterator; > Context: Everywhere" -> "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, <init>(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakIterator, createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;)Ljava/text/BreakIterator; > Context: Everywhere" -> "Node: < Primordial, Ljava/text/DictionaryBasedBreakIterator, <init>(Ljava/lang/String;Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakIterator$BreakIteratorCache, <init>(Ljava/util/Locale;Ljava/text/BreakIterator;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, clone()Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakIterator$BreakIteratorGetter, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakIterator, getBundle(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, readTables(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/DictionaryBasedBreakIterator, <init>(Ljava/lang/String;Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, <init>(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/DictionaryBasedBreakIterator, <init>(Ljava/lang/String;Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/text/BreakDictionary, <init>(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, readTables(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, readFile(Ljava/lang/String;)[B > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakDictionary, <init>(Ljava/lang/String;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/text/BreakDictionary, readDictionaryFile(Ljava/lang/String;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, readFile(Ljava/lang/String;)[B > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakDictionary, readDictionaryFile(Ljava/lang/String;)V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakIterator$1, run()Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle, getBundle(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/RuleBasedBreakIterator$1, run()Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakDictionary$1, run()Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, clone()Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/text/RuleBasedBreakIterator$SafeCharIterator, clone()Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, isBoundary(I)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, following(I)I > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, isBoundary(I)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/text/DictionaryBasedBreakIterator, following(I)I > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/AbstractCollection, toString()Ljava/lang/String; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/AbstractSet, hashCode()I > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, hashCode()I > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle, getBundle(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle, getBundleImpl(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Class, desiredAssertionStatus()Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, following(I)I > Context: Everywhere" -> "Node: < Primordial, Ljava/text/DictionaryBasedBreakIterator, handleNext()I > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/DictionaryBasedBreakIterator, following(I)I > Context: Everywhere" -> "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, following(I)I > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle, getBundleImpl(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle, findBundle(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/List;ILjava/util/ResourceBundle$Control;Ljava/util/ResourceBundle;)Ljava/util/ResourceBundle; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle, getBundleImpl(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle, throwMissingResourceException(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/Throwable;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle, getBundleImpl(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle$Control, getFallbackLocale(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/Locale; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/DictionaryBasedBreakIterator, handleNext()I > Context: Everywhere" -> "Node: < Primordial, Ljava/text/DictionaryBasedBreakIterator, divideUpDictionaryRange(II)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, <clinit>()V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, <clinit>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, getSystemClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle, findBundle(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/List;ILjava/util/ResourceBundle$Control;Ljava/util/ResourceBundle;)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/Thread, interrupt()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle, findBundle(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/List;ILjava/util/ResourceBundle$Control;Ljava/util/ResourceBundle;)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle, findBundle(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/List;ILjava/util/ResourceBundle$Control;Ljava/util/ResourceBundle;)Ljava/util/ResourceBundle; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle, findBundle(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/List;ILjava/util/ResourceBundle$Control;Ljava/util/ResourceBundle;)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle, loadBundle(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/ResourceBundle$Control;Z)Ljava/util/ResourceBundle; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle, findBundle(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/List;ILjava/util/ResourceBundle$Control;Ljava/util/ResourceBundle;)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle, putBundleInCache(Ljava/util/ResourceBundle$CacheKey;Ljava/util/ResourceBundle;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle, throwMissingResourceException(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/Throwable;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/DictionaryBasedBreakIterator, divideUpDictionaryRange(II)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, contains(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle, loadBundle(Ljava/util/ResourceBundle$CacheKey;Ljava/util/List;Ljava/util/ResourceBundle$Control;Z)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle$Control, newBundle(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/util/ResourceBundle; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle, putBundleInCache(Ljava/util/ResourceBundle$CacheKey;Ljava/util/ResourceBundle;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap, putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle, putBundleInCache(Ljava/util/ResourceBundle$CacheKey;Ljava/util/ResourceBundle;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap, put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/concurrent/ConcurrentHashMap$Segment, put(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader$1, run()Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader$1, run()Ljava/util/ResourceBundle$RBClassLoader; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/RuleBasedBreakIterator$SafeCharIterator, clone()Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/StringBuilder, append(Ljava/lang/Object;)Ljava/lang/StringBuilder; > Context: Everywhere" 
 "Node: < Primordial, Ljava/text/BreakIterator$BreakIteratorCache, createBreakInstance()Ljava/text/BreakIterator; > Context: Everywhere" -> "Node: < Primordial, Ljava/text/RuleBasedBreakIterator, clone()Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/Class, getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, getSystemResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$Control, getFallbackLocale(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/Locale; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Locale, getDefault()Ljava/util/Locale; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$Control, newBundle(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$Control, newBundle(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/util/ResourceBundle; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/PropertyResourceBundle, <init>(Ljava/io/InputStream;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader$1, run()Ljava/util/ResourceBundle$RBClassLoader; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, <init>(Ljava/util/ResourceBundle$1;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ClassLoader, getSystemResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, getSystemResource(Ljava/lang/String;)Ljava/net/URL; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/PropertyResourceBundle, <init>(Ljava/io/InputStream;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Properties, load(Ljava/io/InputStream;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/PropertyResourceBundle, <init>(Ljava/io/InputStream;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/HashMap, <init>(Ljava/util/Map;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, <init>(Ljava/util/ResourceBundle$1;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, <init>()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ClassLoader, getSystemResource(Ljava/lang/String;)Ljava/net/URL; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, getSystemClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/HashMap, <init>(Ljava/util/Map;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/HashMap, putAllForCreate(Ljava/util/Map;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, <init>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, <init>()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/HashMap, putAllForCreate(Ljava/util/Map;)V > Context: Everywhere" -> "Node: < Primordial, Ljava/util/HashMap, putForCreate(Ljava/lang/Object;Ljava/lang/Object;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ClassLoader, <init>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, getSystemClassLoader()Ljava/lang/ClassLoader; > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ClassLoader, <init>()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, checkCreateClassLoader()Ljava/lang/Void; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/HashMap, putForCreate(Ljava/lang/Object;Ljava/lang/Object;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, hashCode()I > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/HashMap, putForCreate(Ljava/lang/Object;Ljava/lang/Object;)V > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/ClassLoader, checkCreateClassLoader()Ljava/lang/Void; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkCreateClassLoader()V > Context: Everywhere" 
 "Node: < Primordial, Ljava/lang/SecurityManager, checkCreateClassLoader()V > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/SecurityManager, checkPermission(Ljava/security/Permission;)V > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/WeakHashMap$Holder, <clinit>()V > Context: Everywhere" -> "Node: synthetic < Primordial, Ljava/security/AccessController, doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$Control$1, run()Ljava/lang/Object; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle$Control$1, run()Ljava/io/InputStream; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$Control$1, run()Ljava/io/InputStream; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, getResource(Ljava/lang/String;)Ljava/net/URL; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$Control$1, run()Ljava/io/InputStream; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, getResource(Ljava/lang/String;)Ljava/net/URL; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, getSystemResource(Ljava/lang/String;)Ljava/net/URL; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/ResourceBundle$RBClassLoader, getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; > Context: Everywhere" -> "Node: < Primordial, Ljava/lang/ClassLoader, getSystemResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/AbstractSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/util/AbstractCollection, containsAll(Ljava/util/Collection;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/AbstractCollection, containsAll(Ljava/util/Collection;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/util/HashSet, contains(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/HashSet, contains(Ljava/lang/Object;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/util/HashMap, containsKey(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/HashMap, containsKey(Ljava/lang/Object;)Z > Context: Everywhere" -> "Node: < Primordial, Ljava/util/HashMap, getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry; > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/HashMap, getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, hashCode()I > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/HashMap, getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry; > Context: Everywhere" -> "Node: < Application, LJLex/SparseBitSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/HashMap, getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/HashMap, getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/AbstractSet, hashCode()I > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/HashMap, getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/AbstractSet, equals(Ljava/lang/Object;)Z > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/HashMap, getEntry(Ljava/lang/Object;)Ljava/util/HashMap$Entry; > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, hashCode()I > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/Vector, hashCode()I > Context: Everywhere" -> "Node: < Primordial, Ljava/util/AbstractList, hashCode()I > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/AbstractList, hashCode()I > Context: Everywhere" -> "Node: < Primordial, Ljava/util/AbstractSet, hashCode()I > Context: Everywhere" 
 "Node: < Primordial, Ljava/util/AbstractList, hashCode()I > Context: Everywhere" -> "Node: < Primordial, Ljava/util/Vector, hashCode()I > Context: Everywhere" 

}